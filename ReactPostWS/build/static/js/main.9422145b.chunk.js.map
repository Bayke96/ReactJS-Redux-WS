{"version":3,"sources":["actions/types.js","reducers/reducers.js","methods/FormMethods.js","components/createPost.js","actions/thunks.js","actions/actions.js","containers/createContainer.js","components/readPost.js","containers/readContainer.js","components/updatePost.js","containers/updateContainer.js","components/deletePost.js","containers/deleteContainer.js","components/App.js","index.js"],"names":["DELETE_POST","initialState","id","userID","title","body","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","mobileParagraphs","document","getElementsByClassName","mobileBody","desktopParagraphs","desktopBody","getElementById","i","item","innerHTML","innerText","resetPostGET","deleteParagraphs","deleteBody","resetPostDELETE","createPost","componentDidMount","userList","idList","select","fetch","then","response","json","data","push","opt","el","createElement","textContent","value","appendChild","this","props","react_default","a","className","method","onSubmitCapture","e","preventDefault","onSubmit","defaultValue","onClickCapture","onClick","Component","deleteExistingPost","selectPostID","resetButton","dispatch","alert","axios","url","config","headers","Content-Type","click","catch","error","status","connect","user","postUserID","postTitle","postBody","trim","postFormData","FormData","set","createNewPost","Create","readPost","_this$props","post","postID","numbersReg","RegExp","test","parseInt","get","postInfo","userId","getPostInfo","Read","updatePost","postList","postIDList","selectUserID","updateExistingPost","onChange","target","selectedIndex","newPostTitle","newPostBody","Update","deletePost","Delete","App","react_router_dom","to","react_router","exact","path","component","store","createStore","applyMiddleware","thunk","render","es","components_App"],"mappings":"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","file":"static/js/main.9422145b.chunk.js","sourcesContent":["export const CREATE_POST = 'CREATE_POST';\r\nexport const READ_POST = 'READ_POST';\r\nexport const UPDATE_POST = 'UPDATE_POST';\r\nexport const DELETE_POST = 'DELETE_POST';","import { resetPostGET, resetPostDELETE } from '../methods/FormMethods';\r\nimport { CREATE_POST, READ_POST, UPDATE_POST, DELETE_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    userID: 0,\r\n    title: '',\r\n    body: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case CREATE_POST:\r\n            return { ...state };\r\n\r\n        case READ_POST:\r\n            state.id = action.id;\r\n            state.userID = action.userID;\r\n            state.title = action.title;\r\n            state.body = action.body;\r\n            return { ...state };\r\n\r\n        case UPDATE_POST:\r\n            return { ...state };\r\n\r\n        case DELETE_POST:\r\n            return { ...state };\r\n\r\n        case 'RESET_POST_GET':\r\n            resetPostGET();\r\n            return { id: 0, userID: 0, title: '', body: '' };\r\n\r\n        case 'RESET_POST_DELETE':\r\n            resetPostDELETE();\r\n            return { id: 0, userID: 0, title: '', body: '' };\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport default reducer;","export const resetPostGET = () => {\r\n\r\n    // ------------ MOBILE VERSION VARIABLES ------------- //\r\n\r\n    var mobileParagraphs = document.getElementsByClassName('mobile-response-paragraph');\r\n    var mobileBody = document.getElementsByClassName('mobile-post-body');\r\n\r\n    // ------------ DESKTOP VERSION VARIABLES - READ POST PAGE ------------- //\r\n\r\n    var desktopParagraphs = document.getElementsByClassName('post-response');\r\n    var desktopBody = document.getElementById('desktop-post-body');\r\n\r\n    // ------------ LOOP TO REMOVE TEXT FROM ALL MOBILE PARAGRAPHS ------------- //\r\n\r\n    for (var i = 0; i < mobileParagraphs.length; ++i) {\r\n        var item = mobileParagraphs[i];\r\n        item.innerHTML = '';\r\n    }\r\n\r\n    // ------------ LOOP TO REMOVE TEXT FROM THE MAIN POST BODY ------------- //\r\n\r\n    for (i = 0; i < mobileBody.length; ++i) {\r\n        item = mobileBody[i];\r\n        item.innerHTML = '';\r\n    }\r\n\r\n    // ------------ LOOP TO REMOVE TEXT FROM THE DESKTOP VERSION'S PARAGRAPHS ------------- //\r\n\r\n    for (i = 0; i < desktopParagraphs.length; ++i) {\r\n        item = desktopParagraphs[i];\r\n        item.innerHTML = '';\r\n    }\r\n\r\n    // ------------ REMOVE TEXT FROM DESKTOP VERSION'S MAIN BODY ------------- //\r\n\r\n    desktopBody.innerText = '';\r\n}\r\n\r\nexport const resetPostDELETE = () => {\r\n\r\n    // ------------ DELETE POST PAGE VARIABLES ------------- //\r\n\r\n    var deleteParagraphs = document.getElementsByClassName('delete-post-paragraph');\r\n    var deleteBody = document.getElementsByClassName('delete-post-body');\r\n\r\n    // ------------ LOOP TO REMOVE TEXT FROM THE DELETE POST PARAGRAPH'S PAGE ------------- //\r\n\r\n    for (var i = 0; i < deleteParagraphs.length; ++i) {\r\n        var item = deleteParagraphs[i];\r\n        item.innerText = '';\r\n    }\r\n\r\n    // ------------ LOOP TO REMOVE TEXT FROM THE DELETE POST'S MAIN BODY PAGE ------------- //\r\n\r\n    for (i = 0; i < deleteBody.length; ++i) {\r\n        item = deleteBody[i];\r\n        item.innerText = '';\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass createPost extends Component {\r\n\r\n    componentDidMount = () => {\r\n\r\n        // ---------------------- SET WINDOW'S TITLE --------------- //\r\n\r\n        document.title = \"ReactJS - API Call - POST\";\r\n\r\n        // --------------------- ARRAY TO STORE RESULTS FROM THE API CALL ------------------ //\r\n\r\n        let userList = [];\r\n\r\n        // --------------------- ARRAY TO EXTRACT ID'S FROM THE USER LIST ARRAY --------------- //\r\n\r\n        let idList = [];\r\n\r\n        let select = document.getElementById('new-post-userID');\r\n\r\n        // ----------------------- API CALL TO GET ALL USERS ---------------------- //\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                // ------------ PUSH THE RESPONSE TO THE USER LIST ARRAY -------- //\r\n\r\n                userList.push(data);\r\n\r\n                // ----------------- LOOP TO PUSH ONLY THE ID'S TO THE ID LIST ARRAY --- //\r\n\r\n                for (var i = 0; i < userList[0].length; i++) {\r\n                    idList.push(userList[0][i].id);\r\n                }\r\n\r\n                // -- LOOP TO POPULATE THE SELECT OPTION WITH THE ID'S FROM THE ID LIST ARRAY -- //\r\n\r\n                for (i = 0; i < idList.length; i++) {\r\n                    var opt = idList[i];\r\n                    var el = document.createElement('option');\r\n                    el.textContent = opt;\r\n                    el.value = opt;\r\n                    select.appendChild(el);\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { createPost } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"body-header\">CREATE A POST</h2>\r\n                <form method=\"POST\" onSubmitCapture={e => { e.preventDefault(); }} onSubmit={createPost}>\r\n                    <div className=\"form-div\">\r\n\r\n                        <p><b>U</b>ser <b>I</b>D</p>\r\n                        <select id = \"new-post-userID\">\r\n                            <option defaultValue value='Choose'>Choose</option>\r\n                        </select>\r\n\r\n                        <p><b>T</b>itle</p>\r\n                        <input type=\"text\" id = \"new-post-title\" />\r\n\r\n                        <p><b>B</b>ody</p>\r\n                        <textarea id = \"new-post-body\" /> <br />\r\n\r\n                        <div className=\"form-buttons\">\r\n                            <button onClickCapture={e => { e.preventDefault(); }} onClick={createPost} > Create</button>\r\n                            <button type=\"reset\" id = \"create-form-reset\">Reset</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default createPost;","import axios from 'axios';\r\nimport { createPost, readPost, updatePost, deletePost } from './actions'; \r\n\r\nexport const getPostInfo = () => {\r\n\r\n    var postID = document.getElementById('getPostID').value;\r\n    var numbersReg = new RegExp('^[0-9]+$');\r\n\r\n    return (dispatch) => {\r\n\r\n        if (postID.trim() === '') {\r\n            alert('You must type a Post ID.');\r\n            return false;\r\n        }\r\n        if (numbersReg.test(postID) === false) {\r\n            alert('Only positive numbers allowed.');\r\n            return false;\r\n        }\r\n        if (parseInt(postID) <= 0) {\r\n            alert('Only numbers greater than 0 allowed.');\r\n            return false;\r\n        }\r\n\r\n        return axios.get('https://jsonplaceholder.typicode.com/posts/' + postID)\r\n            .then(response => {\r\n                dispatch(readPost(response.data));\r\n            })\r\n            .catch(function (error) {\r\n                if (error.response.status === 500 || error.response.status === 404) {\r\n                    alert('This Post ID does not exist.');\r\n                    return false;\r\n                }\r\n            });\r\n    };\r\n};\r\n\r\nexport const createNewPost = () => {\r\n\r\n    var postUserID = document.getElementById('new-post-userID').value;\r\n    var postTitle = document.getElementById('new-post-title').value;\r\n    var postBody = document.getElementById('new-post-body').value;\r\n    var resetButton = document.getElementById('create-form-reset');\r\n\r\n    return (dispatch) => {\r\n\r\n        if (postUserID === 'Choose') {\r\n            alert('You must choose an user ID.');\r\n            return false;\r\n        }\r\n        if (postTitle.trim() === '') {\r\n            alert('You must type a title for the post.');\r\n            return false;\r\n        }\r\n        if (postTitle.trim().length < 3) {\r\n            alert(\"The post's title must contain at least 3 characters.\");\r\n            return false;\r\n        }\r\n        if (postBody.trim() === '') {\r\n            alert('You must type a body for the post.');\r\n            return false;\r\n        }\r\n        if (postBody.trim().length < 3) {\r\n            alert(\"The post's body must contain at least 3 characters.\");\r\n            return false;\r\n        }\r\n\r\n        var postFormData = new FormData();\r\n        postFormData.set('userId', postUserID);\r\n        postFormData.set('title', postTitle.trim());\r\n        postFormData.set('body', postBody.trim());\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: 'https://jsonplaceholder.typicode.com/posts/',\r\n            data: postFormData,\r\n            config: { headers: { 'Content-Type': 'multipart/form-data' } }\r\n        })\r\n            .then(function (response) {\r\n                alert('New Post Created.');\r\n                resetButton.click();\r\n                dispatch(createPost());\r\n            })\r\n            .catch(function (error) {\r\n                if (error.response.status === 500 || error.response.status === 404) {\r\n                    alert('This Post ID does not exist.');\r\n                    return false;\r\n                }\r\n            });\r\n    };\r\n};\r\n\r\nexport const updateExistingPost = () => {\r\n\r\n    var selectPostID = document.getElementById('update-post-postID').value;\r\n    var selectUserID = document.getElementById('update-post-userID').value;\r\n    var newPostTitle = document.getElementById('edit-post-title').value;\r\n    var newPostBody = document.getElementById('edit-post-body').value;\r\n    var resetButton = document.getElementById('reset-update-form');\r\n\r\n    return (dispatch) => {\r\n\r\n        if (selectPostID === 'Choose') {\r\n            alert('You must choose a Post ID.');\r\n            return false;\r\n        }\r\n        if (selectUserID === 'Choose') {\r\n            alert('You must choose an user ID.');\r\n            return false;\r\n        }\r\n\r\n        if (newPostTitle.trim() === '') {\r\n            alert('You must type a new title for the post.');\r\n            return false;\r\n        }\r\n        if (newPostTitle.trim().length < 3) {\r\n            alert(\"The post's title must contain at least 3 characters.\");\r\n            return false;\r\n        }\r\n\r\n        if (newPostBody.trim() === '') {\r\n            alert('You must type a new body for the post.');\r\n            return false;\r\n        }\r\n        if (newPostBody.trim().length < 3) {\r\n            alert(\"The post's new body must contain at least 3 characters.\");\r\n            return false;\r\n        }\r\n\r\n        var postFormData = new FormData();\r\n        postFormData.set('userId', selectUserID);\r\n        postFormData.set('title', newPostTitle.trim());\r\n        postFormData.set('body', newPostBody.trim());\r\n\r\n        return axios({\r\n            method: 'PUT',\r\n            url: 'https://jsonplaceholder.typicode.com/posts/' + selectPostID,\r\n            data: postFormData,\r\n            config: { headers: { 'Content-Type': 'multipart/form-data' } }\r\n        })\r\n            .then(function (response) {\r\n                alert('Post Updated.');\r\n                resetButton.click();\r\n                dispatch(updatePost());\r\n            })\r\n            .catch(function (error) {\r\n                if (error.response.status === 500 || error.response.status === 404) {\r\n                    alert('This Post ID does not exist.');\r\n                    return false;\r\n                }\r\n            });\r\n    };\r\n};\r\n\r\nexport const deleteExistingPost = () => {\r\n\r\n    var selectPostID = document.getElementById('delete-post-postID').value;\r\n    var resetButton = document.getElementById('reset-delete-form');\r\n\r\n    return (dispatch) => {\r\n\r\n        if (selectPostID === 'Choose') {\r\n            alert('You must choose a Post ID.');\r\n            return false;\r\n        }\r\n\r\n        return axios({\r\n            method: 'DELETE',\r\n            url: 'https://jsonplaceholder.typicode.com/posts/' + selectPostID,\r\n            data: selectPostID,\r\n            config: { headers: { 'Content-Type': 'multipart/form-data' } }\r\n        })\r\n            .then(function (response) {\r\n                alert('Post Deleted.');\r\n                resetButton.click();\r\n                dispatch(deletePost());\r\n            })\r\n            .catch(function (error) {\r\n                if (error.response.status === 500 || error.response.status === 404) {\r\n                    alert('This Post ID does not exist.');\r\n                    return false;\r\n                }\r\n            });\r\n    };\r\n};","import { CREATE_POST, READ_POST, UPDATE_POST, DELETE_POST } from './types';\r\n\r\nexport const createPost = () => {\r\n    return {\r\n        type: CREATE_POST\r\n    }\r\n}\r\n\r\nexport const readPost = (postInfo) => {\r\n    return {\r\n        type: READ_POST,\r\n        id: postInfo.id,\r\n        userID: postInfo.userId,\r\n        title: postInfo.title,\r\n        body: postInfo.body\r\n    }\r\n};\r\n\r\nexport const updatePost = () => {\r\n    return {\r\n        type: UPDATE_POST\r\n    }\r\n}\r\n\r\nexport function deletePost() {\r\n    return {\r\n        type: DELETE_POST\r\n    }\r\n}\r\n\r\nexport function resetPostGET() {\r\n    return {\r\n        type: 'RESET_POST_GET'\r\n    }\r\n}\r\n\r\nexport function resetPostDELETE() {\r\n    return {\r\n        type: 'RESET_POST_DELETE'\r\n    }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport Create from '../components/createPost';\r\nimport { createNewPost } from '../actions/thunks';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createPost: () => dispatch(createNewPost())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Create);","import React, { Component } from 'react';\r\n\r\nclass readPost extends Component {\r\n\r\n    render() {\r\n\r\n\r\n        const { post, readPost, resetPostGET } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"body-header\">GET A POST</h2>\r\n\r\n                <div id=\"get-post-info-div\">\r\n                    <form id=\"get-post-form\" method=\"GET\" onSubmitCapture={e => { e.preventDefault(); }} onSubmit={readPost}>\r\n\r\n                        <p><b>P</b>ost <b>I</b>D</p>\r\n                        <input type=\"text\" id = \"getPostID\" />\r\n\r\n                        <div className=\"form-buttons\">\r\n                            <button type=\"button\" onClickCapture={e => { e.preventDefault(); }} onClick={readPost}>Search</button>\r\n                            <button type=\"reset\" onClick={resetPostGET}>Reset</button>\r\n                        </div>\r\n\r\n                    </form>\r\n                </div>\r\n\r\n                <div id = \"post-info-mobile\">\r\n                    <div className=\"post-info-container\">\r\n                        <p>Post ID</p>\r\n                    </div>\r\n\r\n                    <p className=\"mobile-response-paragraph\">\r\n                        {post.id === 0 ? '' : post.id}\r\n                    </p>\r\n\r\n                    <div className=\"post-info-container\">\r\n                        <p>User ID</p>\r\n                    </div>\r\n\r\n                    <p className=\"mobile-response-paragraph\">\r\n                        {post.userID === 0 ? '' : post.userID}\r\n                    </p>\r\n\r\n                    <div className=\"post-info-container\">\r\n                        <p>Post's Title</p>\r\n                    </div>\r\n\r\n                    <p className=\"mobile-response-paragraph\">\r\n                        {post.title}\r\n                    </p>\r\n\r\n                    <div className=\"post-info-container\">\r\n                        <p>Post's Body</p>\r\n                    </div>\r\n\r\n                    <p className=\"mobile-post-body\">\r\n                        {post.body}\r\n                    </p>\r\n\r\n                </div>\r\n\r\n                <div id=\"post-info-desktop\">\r\n\r\n                    <div id=\"left-div-desktop\">\r\n                        <h2><b>B</b>ody</h2>\r\n                        <p id = \"desktop-post-body\">\r\n                            {post.body}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div id=\"right-div-desktop\">\r\n\r\n                        <h5><b>P</b>ost ID</h5>\r\n                        <p className=\"post-response\">\r\n                            {post.id === 0 ? '' : post.id}\r\n                        </p>\r\n\r\n                        <h5><b>U</b>ser ID</h5>\r\n                        <p className=\"post-response\">\r\n                            {post.userID === 0 ? '' : post.userID}\r\n                        </p>\r\n\r\n                        <h5><b>T</b>itle</h5>\r\n                        <p className=\"post-response\">\r\n                            {post.title}\r\n                        </p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default readPost;","import { connect } from 'react-redux';\r\nimport Read from '../components/readPost';\r\nimport { resetPostGET } from '../actions/actions';\r\nimport { getPostInfo } from '../actions/thunks';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        post: state\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        readPost: () => dispatch(getPostInfo()),\r\n        resetPostGET: () => dispatch(resetPostGET())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Read);","import React, { Component } from 'react';\r\n\r\nclass updatePost extends Component {\r\n\r\n    componentDidMount = () => {\r\n\r\n        document.title = \"ReactJS - API Call - UPDATE\";\r\n\r\n        // --------------------- ARRAY TO STORE RESULTS FROM THE API CALL ------------------ //\r\n\r\n        let userList = [];\r\n        var postList = [];\r\n\r\n        // --------------------- ARRAY TO EXTRACT ID'S FROM THE USER LIST ARRAY --------------- //\r\n\r\n        let idList = [];\r\n        let postIDList = [];\r\n\r\n        let selectUserID = document.getElementById('update-post-userID');\r\n        let selectPostID = document.getElementById('update-post-postID');\r\n\r\n        // ----------------------- API CALL TO GET ALL POSTS ---------------------- //\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                // ------------ PUSH THE RESPONSE TO THE POST LIST ARRAY -------- //\r\n\r\n                postList.push(data);\r\n\r\n                // ----------------- LOOP TO PUSH ONLY THE ID'S TO THE ID LIST ARRAY --- //\r\n\r\n                for (var i = 0; i < postList[0].length; i++) {\r\n                    postIDList.push(postList[0][i].id);\r\n                }\r\n\r\n                // -- LOOP TO POPULATE THE SELECT OPTION WITH THE ID'S FROM THE POST ID LIST ARRAY -- //\r\n\r\n                for (i = 0; i < postIDList.length; i++) {\r\n                    var opt = postIDList[i];\r\n                    var el = document.createElement('option');\r\n                    el.textContent = opt;\r\n                    el.value = opt;\r\n                    selectPostID.appendChild(el);\r\n                }\r\n\r\n            });\r\n\r\n\r\n        // ----------------------- API CALL TO GET ALL USERS ---------------------- //\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                // ------------ PUSH THE RESPONSE TO THE USER LIST ARRAY -------- //\r\n\r\n                userList.push(data);\r\n\r\n                // ----------------- LOOP TO PUSH ONLY THE ID'S TO THE ID LIST ARRAY --- //\r\n\r\n                for (var i = 0; i < userList[0].length; i++) {\r\n                    idList.push(userList[0][i].id);\r\n                }\r\n\r\n                // -- LOOP TO POPULATE THE SELECT OPTION WITH THE ID'S FROM THE ID LIST ARRAY -- //\r\n\r\n                for (i = 0; i < idList.length; i++) {\r\n                    var opt = idList[i];\r\n                    var el = document.createElement('option');\r\n                    el.textContent = opt;\r\n                    el.value = opt;\r\n                    selectUserID.appendChild(el);\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        // --- CONST FUNCTION TO UPDATE FORM DATA DEPENDING ON USER'S POST CHOICE --- //\r\n\r\n        const updateForm = (select) => {\r\n\r\n            // --- VARIABLE THAT STORES THE POST ID SELECTED BY THE USER --- //\r\n\r\n            let postID = select.target.value;\r\n\r\n            // --- API CALL - GET THAT SPECIFIC POST BASED ON THE ID --- //\r\n\r\n            if (postID !== 'Choose') {\r\n\r\n                fetch('https://jsonplaceholder.typicode.com/posts/' + postID)\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n\r\n                        // --- SET THE RESPECTIVE VALUES ON THE TEXTFIELD, TEXTAREA AND USERID SELECT --- //\r\n\r\n                        document.getElementById('update-post-userID').selectedIndex = data.userId;\r\n                        document.getElementById('edit-post-title').value = data.title;\r\n                        document.getElementById('edit-post-body').value = data.body;\r\n\r\n                    });\r\n\r\n            } else {\r\n                document.getElementById('update-post-userID').selectedIndex = 0;\r\n                document.getElementById('edit-post-title').value = '';\r\n                document.getElementById('edit-post-body').value = '';\r\n            }\r\n\r\n           \r\n        };\r\n\r\n        const { updateExistingPost } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"body-header\">UPDATE AN EXISTING POST</h2>\r\n                <form method=\"POST\" onSubmitCapture={e => { e.preventDefault(); }} onSubmit={updateExistingPost} >\r\n                    <div className=\"form-div\">\r\n\r\n                        <p><b>P</b>ost <b>I</b>D</p>\r\n                        <select id=\"update-post-postID\" onChange={updateForm}>\r\n                            <option defaultValue value='Choose'>Choose</option>\r\n                        </select>\r\n\r\n                        <p><b>N</b>ew <b>U</b>ser <b>I</b>D</p>\r\n                        <select id = \"update-post-userID\">\r\n                            <option defaultValue value='Choose'>Choose</option>\r\n                        </select>\r\n\r\n                        <p><b>N</b>ew Title</p>\r\n                        <input type=\"text\" id = \"edit-post-title\" />\r\n\r\n                        <p><b>N</b>ew Body</p>\r\n                        <textarea id = \"edit-post-body\" /> <br />\r\n\r\n                        <div className=\"form-buttons\">\r\n                            <button onClickCapture={e => { e.preventDefault(); }} onClick={updateExistingPost}>Update</button>\r\n                            <button type=\"reset\" id = \"reset-update-form\">Reset</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default updatePost;","import { connect } from 'react-redux';\r\nimport Update from '../components/updatePost';\r\nimport { updateExistingPost } from '../actions/thunks';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExistingPost: () => dispatch(updateExistingPost())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Update);","import React, { Component } from 'react';\r\n\r\nclass deletePost extends Component {\r\n\r\n    componentDidMount = () => {\r\n        document.title = \"ReactJS - API Call - DELETE\";\r\n\r\n        // --------------------- ARRAY TO STORE RESULTS FROM THE API CALL ------------------ //\r\n\r\n        var postList = [];\r\n\r\n        // --------------------- ARRAY TO EXTRACT ID'S FROM THE USER LIST ARRAY --------------- //\r\n\r\n        let postIDList = [];\r\n\r\n        let selectPostID = document.getElementById('delete-post-postID');\r\n\r\n        // ----------------------- API CALL TO GET ALL POSTS ---------------------- //\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                // ------------ PUSH THE RESPONSE TO THE POST LIST ARRAY -------- //\r\n\r\n                postList.push(data);\r\n\r\n                // ----------------- LOOP TO PUSH ONLY THE ID'S TO THE ID LIST ARRAY --- //\r\n\r\n                for (var i = 0; i < postList[0].length; i++) {\r\n                    postIDList.push(postList[0][i].id);\r\n                }\r\n\r\n                // -- LOOP TO POPULATE THE SELECT OPTION WITH THE ID'S FROM THE POST ID LIST ARRAY -- //\r\n\r\n                for (i = 0; i < postIDList.length; i++) {\r\n                    var opt = postIDList[i];\r\n                    var el = document.createElement('option');\r\n                    el.textContent = opt;\r\n                    el.value = opt;\r\n                    selectPostID.appendChild(el);\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        // --- CONST FUNCTION TO UPDATE FORM DATA DEPENDING ON USER'S POST CHOICE --- //\r\n\r\n        const updateForm = (select) => {\r\n\r\n            // --- VARIABLE THAT STORES THE POST ID SELECTED BY THE USER --- //\r\n\r\n            let postID = select.target.value;\r\n\r\n            // --- API CALL - GET THAT SPECIFIC POST BASED ON THE ID --- //\r\n\r\n            if (postID !== 'Choose') {\r\n\r\n                fetch('https://jsonplaceholder.typicode.com/posts/' + postID)\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n\r\n                        // --- SET THE RESPECTIVE VALUES ON THE TEXTFIELD, TEXTAREA AND USERID SELECT --- //\r\n\r\n                        document.getElementById('delete-post-userID').innerText = data.userId;\r\n                        document.getElementById('delete-post-title').innerText = data.title;\r\n                        document.getElementById('delete-post-body').innerText = data.body;\r\n\r\n                    });\r\n\r\n            } else {\r\n                document.getElementById('delete-post-userID').innerText = '';\r\n                document.getElementById('delete-post-title').innerText = '';\r\n                document.getElementById('delete-post-body').innerText = '';\r\n            }\r\n\r\n        };\r\n\r\n        const { deleteExistingPost, resetPostDELETE } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"body-header\">DELETE AN EXISTING POST</h2>\r\n                <form method=\"POST\" onSubmitCapture={e => { e.preventDefault(); }} onSubmit={deleteExistingPost} >\r\n                    <div className=\"form-div\">\r\n\r\n                        <p><b>P</b>ost <b>I</b>D</p>\r\n                        <select id=\"delete-post-postID\" onChange={updateForm}>\r\n                            <option defaultValue>Choose</option>\r\n                        </select>\r\n\r\n                        <p><b>U</b>ser <b>I</b>D</p>\r\n                        <p className=\"delete-post-paragraph\" id = \"delete-post-userID\">\r\n                           \r\n                        </p>\r\n                        \r\n                        <p><b>T</b>itle</p>\r\n                        <p className=\"delete-post-paragraph\" id = \"delete-post-title\">\r\n                          \r\n                        </p>\r\n\r\n                        <p><b>B</b>ody</p>\r\n                        <p className=\"delete-post-body\" id = \"delete-post-body\">\r\n                            \r\n                        </p>\r\n                       \r\n\r\n                        <div className=\"form-buttons\">\r\n                            <button onClickCapture={e => { e.preventDefault(); }} onClick={deleteExistingPost} >Delete</button>\r\n                            <button type=\"reset\" onClick={resetPostDELETE} id = \"reset-delete-form\">Reset</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default deletePost;","import { connect } from 'react-redux';\r\nimport Delete from '../components/deletePost';\r\nimport { deleteExistingPost } from '../actions/thunks';\r\nimport { resetPostDELETE } from '../actions/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteExistingPost: () => dispatch(deleteExistingPost()),\r\n        resetPostDELETE: () => dispatch(resetPostDELETE())\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Delete);","import React from 'react';\r\nimport '../static-files/css/App.css';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport Create from '../containers/createContainer';\r\nimport Read from '../containers/readContainer';\r\nimport Update from '../containers/updateContainer';\r\nimport Delete from '../containers/deleteContainer';\r\n\r\nconst App = () => {\r\n\r\n\r\n        return (\r\n            <Router>\r\n                <div className=\"App\">\r\n                    <header className= \"\">\r\n\r\n                            <button className=\"header-button\" >\r\n                                <Link to=\"/create\">Create</Link>\r\n                            </button>\r\n\r\n                            <button className=\"header-button\" >\r\n                                <Link to=\"/read\">Read</Link>\r\n                            </button>\r\n\r\n                            <button className = \"header-button\" >\r\n                                <Link to=\"/update\">Update</Link>\r\n                            </button>\r\n\r\n                            <button className = \"header-button\" >\r\n                                <Link to=\"/delete\">Delete</Link>\r\n                            </button>\r\n\r\n                        \r\n\r\n                    </header>\r\n\r\n                    <Route exact path=\"/\" component={Read} />\r\n                    <Route path=\"/create\" component={Create} />\r\n                    <Route path=\"/read\" component={Read} />\r\n                    <Route path=\"/update\" component={Update} />\r\n                    <Route path=\"/delete\" component={Delete} />\r\n\r\n                </div>\r\n            </Router>\r\n        );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducers/reducers';\r\nimport App from './components/App';\r\nimport './static-files/css/index.css';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}